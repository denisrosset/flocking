from utility import *

from noises import *
from forces import *
from velocity_update import *
from neighbors import *

from flock import *
from flockstep import *
from __future__ import with_statement
from __future__ import division
from utility import *
from scipy import *

d = 2

##
# Initializes the flock with random bird positions, and random velocities
# with specified norm
class ConstantVelocityMagnitudeRandomFlockInitializer(object):
    def __init__(self, v):
        self.v = v

    ##
    # Initializes a flock
    # @f The flock to be initiliazed
    def initFlock(self, f):
        with f.random_state:
            f.x = random.random([f.N, d]) * f.L
            angles = random.random(f.N) * pi
            f.v = array((cos(angles), sin(angles))).transpose() * self.v

class Flock(object):
    def __init__(self, N, L, seed, flockInitializer):
        self.N = N
        self.L = L
        self.seed = seed
        self.random_state = RandomState(seed)
        self.x = zeros([N, d])
        self.v = zeros([N, d])
        self.f = zeros([N, d])
        flockInitializer.initFlock(self)

    ##
    # @return the normalized position of x in the torus plane
    def loop_position(self, x):
        def loop_coord(a):
            a = a + self.L if a < 0 else a
            a = a - self.L if a > self.L else a
            return a
        return array([loop_coord(x[0]), loop_coord(x[1])])

    ##
    # given two vectors a and b, returns delta such that
    # delta = self.period_sub(a, b)
    # b + delta = a in the torus plane
    # and delta.norm() is minimized
    def period_sub(self, a, b):
        def compsub(a, b):
            d = a - b
            d = d + self.L if d < -self.L/2 else d
            d = d - self.L if d > self.L/2 else d
            return d
        return array([compsub(a[0], b[0]), compsub(a[1], b[1])])

    ##
    # gives the distance between the birds i and j
    # @return the distance
    def distance_between_birds(self, i, j):
        return linalg.norm(self.period_sub(self.x[i,:], self.x[j,:]))

    def phi(self):
        sum_v = linalg.norm(self.v.mean(axis=0))
        individual_norms = sqrt((self.v * self.v).sum(axis = 1))
        return sum_v / mean(individual_norms)
from __future__ import with_statement
from __future__ import division
from scipy import *
import scipy.weave
import md5

class FlockStep(object):
    def __init__(self,
                 dt,
                 neighbor_selector,
                 velocity_updater,
                 noise_adder,
                 fav_evaluator,
                 fint_evaluator,
                 fvreg_evaluator):
        self.dt = dt
        self.neighbor_selector = neighbor_selector
        self.velocity_updater = velocity_updater
        self.noise_adder = noise_adder
        self.fav_evaluator = fav_evaluator
        self.fint_evaluator = fint_evaluator
        self.fvreg_evaluator = fvreg_evaluator

    def c_step(self, flock, steps = 1):
        x_ = flock.x
        v_ = flock.v
        f_ = flock.f
        random_size = self.noise_adder.code_size_random_array(flock.N)
        with flock.random_state:
            rnd_ = random.rand(random_size * steps)
        N_ = flock.N
        L_ = flock.L
        assert(x_.dtype is dtype('float64'))
        assert(v_.dtype is dtype('float64'))
        assert(f_.dtype is dtype('float64'))
        assert(rnd_.dtype is dtype('float64'))

        support_code = '''
typedef double vector[2];
vector * x, * v, * f;
double * rnd;
const int N = %d;
const double L = %f;

double inline
comp_sub(double a, double b) 
{
double d = a - b;
d = d < -L/2 ? d + L : d;
d = d > L/2 ? d - L : d;
return d;
}


double inline
loop_coord(double a)
{
a = a < 0 ? a + L : a;
a = a > L ? a - L : a;
return a;
}
''' % (N_, L_)

        init_code = '''
/* N = %d, L = %f - md5 %s hack to change checksum of code TODO: fix scipy */
x = (vector*)x_;
v = (vector*)v_;
f = (vector*)f_;
rnd = rnd_;
''' % (N_, L_, md5.md5(support_code).hexdigest())
        start_loop_code = '''
for (int step = 0; step < %d; step ++) {
''' % steps
        start_forces_code = '''
for (int i = 0; i < N; i ++) {
vector fvreg = {0, 0};
vector fav = {0, 0};
vector fint = {0, 0};
f[i][0] = f[i][1] = 0;'''
        start_selector_code = self.neighbor_selector.start_code()
        fav_term_code = self.fav_evaluator.add_term_code('fav')
        fint_term_code = self.fint_evaluator.add_term_code('fint')
        fvreg_term_code = self.fvreg_evaluator.add_term_code('fvreg')
        end_selector_code = self.neighbor_selector.end_code()
        fav_shape_code = self.fav_evaluator.shape_sum_code('fav')
        fint_shape_code = self.fint_evaluator.shape_sum_code('fint')
        fvreg_shape_code = self.fvreg_evaluator.shape_sum_code('fvreg')
        end_forces_code = '''
f[i][0] = fav[0] + fvreg[0] + fint[0];
f[i][1] = fav[1] + fvreg[1] + fint[1];
}'''

        start_velocities_code = '''
for (int i = 0; i < N; i ++) {
double newv[2];
'''
        velocity_update_code = self.velocity_updater.code()
        noise_code = self.noise_adder.code()
        end_velocities_code = '''
}'''
        position_code = '''
for (int i = 0; i < N; i ++) {
double dt = %f;
x[i][0] = loop_coord(x[i][0] + v[i][0] * dt);
x[i][1] = loop_coord(x[i][1] + v[i][1] * dt);
}''' % self.dt
        end_loop_code = '''
}
'''
        code = ''.join([init_code,
                        start_loop_code,
                        start_forces_code, 
                        start_selector_code,
                        fav_term_code, fint_term_code, fvreg_term_code,
                        end_selector_code,
                        fav_shape_code, fint_shape_code, fvreg_shape_code,
                        end_forces_code,
                        start_velocities_code,
                        velocity_update_code,
                        noise_code,
                        end_velocities_code,
                        position_code,
                        end_loop_code])
        flags = ['-Wno-unused-variable', '-fast', '-fPIC', '-msse2',
                 '-ftree-vectorize']
                 
        scipy.weave.inline(code, ['x_', 'v_', 'f_', 'rnd_'], support_code = support_code,
                           extra_compile_args = flags, compiler = 'gcc')


    def step(self, flock, steps = 1):
        for i in range(0, steps):
            self.step_forces(flock)
            self.step_velocities(flock)
            self.step_positions(flock)

    def step_forces(self, flock):
        for i in range(0, flock.N):
            fint = array([0., 0.])
            fav = array([0., 0.])
            fvreg = array([0., 0.])
            for j in self.neighbor_selector.get_list_of_neighbors(flock, i):
                fint = fint + self.fint_evaluator.term(flock, i, j)
                fav = fav + self.fav_evaluator.term(flock, i, j)
                fvreg = fvreg + self.fvreg_evaluator.term(flock, i, j)
            flock.f[i,:] = (self.fint_evaluator.shape_sum(flock, i, fint) +
                            self.fav_evaluator.shape_sum(flock, i, fav) +
                            self.fvreg_evaluator.shape_sum(flock, i, fvreg))
    
    def step_velocities(self, flock):
        for i in range(0, flock.N):
            flock.v[i, :] = self.noise_adder.get_with_noise(
                self.velocity_updater.get_new_velocity(flock, i, self.dt), 
                flock.random_state)

    def step_positions(self, flock):
        for i in range(0, flock.N):
            flock.x[i, :] = flock.loop_position(
                flock.x[i, :] + flock.v[i, :] * self.dt)
from __future__ import with_statement
from __future__ import division
from scipy import *

class OriginalVicsekAverageForceEvaluator(object):
    def __init__(self):
        pass

    def term(self, flock, i, j):
        return flock.v[j,:]

    def shape_sum(self, flock, i, s):
        return s

    def add_term_code(self, name):
        return '''
%s[0] += v[j][0];
%s[1] += v[j][1];
''' % (name, name)

    def shape_sum_code(self, name):
        return '' # nothing

class DummyForceEvaluator(object):
    def term(self, flock, i, j):
        return array([0., 0.])
    def shape_sum(self, flock, i, s):
        return array([0., 0.])
    def add_term_code(self, name):
        return '''
%s[0] = 0;
%s[1] = 0;
''' % (name, name)

    def shape_sum_code(self, name):
        return ''; # nothing
from __future__ import with_statement
from __future__ import division
from scipy import *

class MetricDistanceNeighborSelector(object):
    def __init__(self, R):
        self.R = R

    def get_list_of_neighbors(self, flock, i):
        l = []
        for j in range(0, flock.N):
            if i != j and flock.distance_between_birds(i, j) <= self.R:
                l.append(j)
        return l
    def start_code(self):
        return '''
for (int j = 0; j < N; j ++) {
vector r;
r[0] = comp_sub(x[i][0], x[j][0]);
r[1] = comp_sub(x[i][1], x[j][1]);
double R = %f;

if (i != j && (r[0]*r[0] + r[1]*r[1] <= R*R)) {
''' % self.R
    def end_code(self):
        return '''
}
}
'''
from __future__ import with_statement
from __future__ import division
from scipy import *
from utility import *

class DummyNoiseAdder(object):
    def get_with_noise(self, v, r):
        return array(v)
    def code(self):
        return '''
v[i][0] = newv[0];
v[i][1] = newv[1];
'''

class ScalarNoiseAdder(object):
    def __init__(self, eta):
        self.eta = eta
    def get_with_noise(self, v, r):
        vx = v[0]
        vy = v[1]
        with r:
            deltaTheta = (random.random() - 1/2) * self.eta
        cs = cos(deltaTheta)
        sn = sin(deltaTheta)
        return array([vx * cs - vy * sn,
                      vx * sn + vy * cs])
    def code_size_random_array(self, N):
        return N;
    def code(self):
        if self.eta == 0:
            return DummyNoiseAdder().code()
        return '''
double eta = %f;

double angle = (*rnd++ - 0.5) * eta;
double cs = cos(angle), sn = sin(angle);
v[i][0] = cs * newv[0] - sn * newv[1];
v[i][1] = sn * newv[0] + cs * newv[1];
''' % self.eta
#!/usr/bin/python
import glob,os,stat,time

def checkSum():
    ''' Return a long which can be used to know if any .py files have changed.
    Only looks in the current directory. '''
    val = 0
    for f in (glob.glob ('*.py') + glob.glob('tests/*.py')):
        stats = os.stat (f)
        val += stats [stat.ST_SIZE] + stats [stat.ST_MTIME]
    return val

val = 0
while True:
    if checkSum() != val:
        val = checkSum()
        os.system ('nosetests --with-doctest --with-coverage --cover-package=speedflock --cover-erase -a tags=speedflock')
        for f in glob.glob('*.py'):
            os.system('coverage -a ' + f)
        time.sleep(1)
from __future__ import with_statement
from scipy import *

##
# encapsulates state for the scipy generator
# usage :
# 
class RandomState:
    """ Encapsulate state for the scipy random generator.
    Can be serialized. Not thread-safe. Backups and restores the scipy.random
    state between uses.

    Specifying a 
    >>> from __future__ import with_statement
    >>> import scipy
    >>> r = RandomState(1234)
    >>> with r:
    ...  scipy.random.randint(10)
    ...  scipy.random.randint(10)
    ... 
    3
    6
    >>> r = RandomState(1234)
    >>> 
    """

    def __init__(self, seed = None):
        """
        Construct a RandomState object.
        
        First argument can be a integer or array seed, as used on
        scipy.random.seed(...)

        >>> r = RandomState()
        ...
        >>> r = RandomState(1234)
        ...
        """
        self.seed(seed)

    def seed(self, seed):
        self._backup_scipy_random()
        random.seed(seed)
        self._release_scipy_random()


    # not thread safe
    def _backup_scipy_random(self):
        self._backup_state = random.get_state()
        
    def _restore_scipy_random(self):
        random.set_state(self._backup_state)
        self._backup_state = None

    def _acquire_scipy_random(self):
        self._backup_scipy_random()
        random.set_state(self._state)
        self._state = None

    def _release_scipy_random(self):
        self._state = random.get_state()
        self._restore_scipy_random()

    def __enter__(self):
        self._acquire_scipy_random()
        return random

    def __exit__(self, type, value, traceback):
        self._release_scipy_random()

from __future__ import with_statement
from __future__ import division
from scipy import *

class OriginalVicsekVelocityUpdater(object):
    def __init__(self, v):
        self.v = v
    def get_new_velocity(self, flock, i, dt):
        a = flock.v[i,:] + flock.f[i,:]
        new_v = a / linalg.norm(a) * self.v
        return new_v
    def code(self):
        return '''
newv[0] = v[i][0] + f[i][0];
newv[1] = v[i][1] + f[i][1];
double vv = %f;
double factor = vv/sqrt(newv[0]*newv[0] + newv[1]*newv[1]);
newv[0] *= factor;
newv[1] *= factor;
''' % (self.v)
